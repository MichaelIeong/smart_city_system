module.exports = function (RED) {
    "use strict";

    function OperatorNode(n) {
        RED.nodes.createNode(this, n);
        let node = this;

        this.operator = n.operator; // 运算符
        this.value = n.value; // 动态输入框的值
        this.output = n.output; // 输出字段

        let newMsg = {};
        newMsg.steps = parseInt(0);
        let isadd = false;
        let linkcount = this.wires.length;
        let count = 0;

        this.on("input", function (msg, send, done) {
            count++;
            newMsg.steps = parseInt(Math.max(newMsg.steps, msg.steps + 1));

            if (!isadd) {
                let new_msg = {};

                // 填充新消息
                new_msg.step = parseInt(newMsg.steps);
                new_msg.type = node.type;

                new_msg.operator = node.operator;
                new_msg.value = node.value;
                new_msg.output = node.output;

                let nodeID = node.id; // 节点的唯一 ID
                newMsg[nodeID] = new_msg;
                isadd = true;
            }

            // 移除旧的 `steps` 字段
            delete msg.steps;

            // 合并新的消息
            Object.assign(newMsg, msg);

            // 当所有链接的节点都被处理完后，发送消息
            if (count === linkcount) {
                send(newMsg);
                done();
            }
        });
    }

    // 注册节点类型
    RED.nodes.registerType("Operator", OperatorNode);
};