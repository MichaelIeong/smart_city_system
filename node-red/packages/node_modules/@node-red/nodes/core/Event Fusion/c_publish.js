module.exports = function (RED) {
    "use strict";

    function PublishNode(config) {
        RED.nodes.createNode(this, config);
        let node = this;
        node.rulename = config.rulename;
        node.fusionTarget = config.fusionTarget;

        this.on("input", function (msg, send, done) {
            msg.rulename = node.rulename;
            msg.fusionTarget = node.fusionTarget;
            delete msg._msgid; // 删除 _msgid 字段

            let flowNodes = [];
            RED.nodes.eachNode(function (n) {
                flowNodes.push(n);
            });

            // 封裝傳送資料
            let flowJson = JSON.stringify(flowNodes, null, 2);
            const dataToSend = {
                ruleJson: msg,
                flowJson: flowJson,
                fusionTarget: node.fusionTarget   // ✅ 修正這裡
            };

            const postData = JSON.stringify(dataToSend);
            console.log(JSON.stringify(msg, null, 2));

            // 使用 Node.js 的 http 請求方式，不能直接用 fetch（除非有 polyfill 或額外 module）
            const http = require('http');
            const options = {
                hostname: '127.0.0.1',
                port: 8080,
                path: '/api/node-red/uploadrule',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Content-Length': Buffer.byteLength(postData)
                }
            };

            const req = http.request(options, (res) => {
                res.setEncoding('utf8');
                res.on('data', (chunk) => {
                    console.log('Response:', chunk);
                });
                res.on('end', () => {
                    if (done) done();
                });
            });

            req.on('error', (e) => {
                console.error(`Problem with request: ${e.message}`);
                if (done) done(e);
            });

            req.write(postData);
            req.end();
        });
    }

    RED.nodes.registerType("Publish", PublishNode);
}